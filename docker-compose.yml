version: '3.8'

x-defaults: &default-backend-configuration
  networks:
    - backend
  restart: unless-stopped

services:
  # --------------------------------- db's ---------------------------------------- #

  mongo-user-service:
    <<: *default-backend-configuration
    container_name: mongo-user-service
    image: mongo:7-jammy
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "27016:27017"
    volumes:
      - user-db-service:/data/db
    environment:
      MONGO_INITDB_DATABASE: user-db

  mongo-projects-service:
    <<: *default-backend-configuration
    container_name: mongo-projects-service
    image: mongo:7-jammy
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "27015:27017"
    environment:
      MONGO_INITDB_DATABASE: projects-db
    volumes:
      - projects-db-service:/data/db

  mongodb-tasks-service:
    <<: *default-backend-configuration
    container_name: mongodb-task-service
    image: mongo:7-jammy
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      MONGO_INITDB_DATABASE: tasks-db
    volumes:
      - tasks-db-service:/data/db
    ports:
      - "27001:27017"

  # --------------------------------- oauth 2.0 ---------------------------------------- #

  keycloak-task-manager:
    <<: *default-backend-configuration
    container_name: keycloak-task-manager
    image: quay.io/keycloak/keycloak:25.0.2
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3" ]
      interval: 5s
      timeout: 7s
      retries: 5
    command: [ "start-dev", "--import-realm" ]
    deploy:
      resources:
        limits:
          memory: 2G
    ports:
      - "8280:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB_NAME:
    volumes:
      - ./config/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./config/keycloak/themes/reset-password-web.ftl:/opt/keycloak/themes/mytheme/email/html/executeActions.ftl
      - ./config/keycloak/themes/reset-password-txt.ftl:/opt/keycloak/themes/mytheme/email/text/executeActions.ftl
      - ./custom-user-provider-mongodb/target/keycloak-mongodb-user-storage-provider.jar:/opt/keycloak/providers/keycloak-mongodb-user-storage-provider.jar
      - ./custom-event-listener/target/custom-user-session-listener.jar:/opt/keycloak/providers/custom-user-session-listener.jar


  # --------------------------------- message brokers ---------------------------------------- #

  zookeeper:
    <<: *default-backend-configuration
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    <<: *default-backend-configuration
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # --------------------------------- smtp ---------------------------------------- #

  mail-dev:
    <<: *default-backend-configuration
    container_name: mail
    image: maildev/maildev
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "1080:1080"
      - "1025:1025"

  # --------------------------------- metrics ---------------------------------------- #

  elasticsearch:
    <<: *default-backend-configuration
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  logstash:
    <<: *default-backend-configuration
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: logstash
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "5044:5044"
    volumes:
      - ./config/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch

  kibana:
    <<: *default-backend-configuration
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  victoria-metrics:
    <<: *default-backend-configuration
    container_name: victoria-metrics
    image: victoriametrics/victoria-metrics:v1.93.12
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "8428:8428"
    command: [ "-promscrape.config=promscrape.yml" ]
    volumes:
      - ./config/victoria-metrics/promscrape.yml:/promscrape.yml

  grafana-loki:
    <<: *default-backend-configuration
    container_name: grafana-loki
    deploy:
      resources:
        limits:
          memory: 500M
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"

  grafana-tempo:
    <<: *default-backend-configuration
    container_name: grafana-tempo
    image: grafana/tempo:2.3.1
    deploy:
      resources:
        limits:
          memory: 500M
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./config/tempo/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200"
      - "9095:9095"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"
      - "14268:14268"

  grafana:
    <<: *default-backend-configuration
    container_name: grafana
    image: grafana/grafana:10.2.4
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "3000:3000"
    volumes:
      - ./config/data/grafana:/var/lib/grafana

  # --------------------------------- dockerized applications ---------------------------------------- #

  config-cloud-service:
    <<: *default-backend-configuration
    container_name: config-cloud-service
    image: config-cloud-service
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: dev

  gateway-service:
    <<: *default-backend-configuration
    container_name: gateway-service
    image: gateway-service
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: dev

  kafka-message-service:
    <<: *default-backend-configuration
    container_name: kafka-message-service
    image: kafka-message-service
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      SPRING_PROFILES_ACTIVE: dev

  project-service:
    <<: *default-backend-configuration
    container_name: project-service
    image: project-service
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      SPRING_PROFILES_ACTIVE: dev

  user-service:
    <<: *default-backend-configuration
    container_name: user-service
    image: user-service
    deploy:
      resources:
        limits:
          memory: 500M
    environment:
      SPRING_PROFILES_ACTIVE: dev


  # --------------------------------- networks ---------------------------------------- #

networks:
  backend:
    driver: bridge

  # --------------------------------- volumes ---------------------------------------- #

volumes:
  user-task-manager-db:
  user-db-service:
  projects-db-service:
  tasks-db-service:
  esdata:
    driver: local