version: '3.8'

x-defaults: &default-backend-configuration
  networks:
    - backend
  restart: unless-stopped

services:
  user-keycloak-db:
    <<: *default-backend-configuration
    container_name: user-keycloak-db
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: user-db
    ports:
      - "5411:5432"
    volumes:
      - user-task-manager-db:/var/lib/postgresql/data

  keycloak-task-manager:
    <<: *default-backend-configuration
    container_name: task-manager-keycloak
    image: quay.io/keycloak/keycloak:24.0.2
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3" ]
      interval: 5s
      timeout: 7s
      retries: 5
    command: [ "start-dev", "--import-realm" ]
    ports:
      - "8280:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB_NAME:
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./keycloak/themes/reset-password-web.ftl:/opt/keycloak/themes/mytheme/email/html/executeActions.ftl
      - ./keycloak/themes/reset-password-txt.ftl:/opt/keycloak/themes/mytheme/email/text/executeActions.ftl
      - ./custom-user-provider-mongodb/target/keycloak-mongodb-user-storage-provider.jar:/opt/keycloak/providers/keycloak-mongodb-user-storage-provider.jar
      - ./custom-event-listener/target/custom-user-session-listener.jar:/opt/keycloak/providers/custom-user-session-listener.jar

  mongo-user-service:
    <<: *default-backend-configuration
    container_name: mongo-user-service
    image: mongo:7-jammy
    ports:
      - "27016:27017"
    volumes:
      - user-db-service:/data/db
    environment:
      MONGO_INITDB_DATABASE: user-db

  mongo-projects-service:
    <<: *default-backend-configuration
    container_name: mongo-projects-service
    image: mongo:7-jammy
    ports:
      - "27015:27017"
    environment:
      MONGO_INITDB_DATABASE: projects-db
    volumes:
      - projects-db-service:/data/db

  zookeeper:
    <<: *default-backend-configuration
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    <<: *default-backend-configuration
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1


  # dockerize applications

  config-cloud-service:
    <<: *default-backend-configuration
    container_name: config-cloud-service
    image: config-cloud-service
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: dev

  eureka-discovery-service:
    <<: *default-backend-configuration
    container_name: eureka-discovery-service
    image: eureka-discovery-service
    restart: unless-stopped
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: dev

  gateway-service:
    <<: *default-backend-configuration
    container_name: gateway-service
    image: gateway-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: dev

  kafka-message-service:
    <<: *default-backend-configuration
    container_name: kafka-message-service
    image: kafka-message-service
    environment:
      SPRING_PROFILES_ACTIVE: dev

  project-service:
    <<: *default-backend-configuration
    container_name: project-service
    image: project-service
    environment:
      SPRING_PROFILES_ACTIVE: dev

  user-service:
    <<: *default-backend-configuration
    container_name: user-service
    image: user-service
    environment:
      SPRING_PROFILES_ACTIVE: dev


networks:
  backend:
    driver: bridge

volumes:
  user-task-manager-db:
  user-db-service:
  projects-db-service: