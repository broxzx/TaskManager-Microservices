server:
  port: 0

spring:
  application:
    name: user-service

  config:
    import: "optional:configserver:http://config-cloud-service:8888"

  data:
    mongodb:
      uri: mongodb://mongo-user-service.default.svc.cluster.local:27017


  jpa:
    show-sql: true
    hibernate:
      ddl-auto: validate

  flyway:
    enabled: true
    user: admin
    password: admin
    schemas:
      - public

  kafka:
    bootstrap-servers: http://kafka:9092

  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: http://keycloak-task-manager:8080/realms/task-manager-microservices
            user-name-attribute: preferred_username
        registration:
          keycloak:
            redirect-uri: http://gateway-service:8081/login/oauth2/code/keycloak
            client-id: user-service
            client-secret: OIdp06uPaJgdwH1meKRatic6zuLbFLDQ
            scope:
              - openid
              - microprofile-jwt
              - metrics
            authorization-grant-type: client_credentials
      resourceserver:
        jwt:
          jwk-set-uri: http://keycloak-task-manager:8080/realms/task-manager-microservices/protocol/openid-connect/certs

keycloak:
  serverUrl: http://keycloak-task-manager:8080
  realm: task-manager-microservices
  token:
    client_id: api-gateway-service
    client_secret: K8sqcbKrTEl2631n8nynSuGMScjvgJCe
    request: http://keycloak-task-manager:8080/realms/task-manager-microservices/protocol/openid-connect/token

kafka:
  forgot-password-topic: forgot-password

google:
  client-id:
  client-secret:

eureka:
  instance:
    lease-expiration-duration-in-seconds: 10
    lease-renewal-interval-in-seconds: 10
  client:
    registry-fetch-interval-seconds: 10
    service-url:
      defaultZone: http://eureka-discovery-service:8761/eureka

management:
  server:
    port: 9100
  endpoints:
    web:
      exposure:
        include:
          - health
          - prometheus
  zipkin:
    tracing:
      endpoint: http://grafana-tempo:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    root: info
    org.springframework.security.web.FilterChainProxy: DEBUG
    org.springframework.security.web.access.intercept.FilterSecurityInterceptor: DEBUG
    org.springframework.security.access.vote.AffirmativeBased: DEBUG
    org.springframework.security.access.vote.AuthenticatedVoter: DEBUG
  config: classpath:logback-dev.xml